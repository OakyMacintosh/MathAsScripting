?start: statement+

?statement: assignment
    | object_decl
    | function_def
    | expr_block
    | control_stmt

assignment: "let" NAME "=" expr
object_decl: "p" "{" "dec=" NAME "}" "=" object_value
function_def: "f" "(" NAME ")" "=" expr
expr_block: "expr" "(" expr ")" -> expr_expr
unit_expr: "expr" "(" NUMBER_UNIT ")" -> unit_expr

control_stmt: "drop" function_def ":" block "end"  -> drop_loop
    | "stokh" "(" condition ")" ":" block "end"  -> stokh_loop
    | "if" "(" condition ")" ":" block "end"  -> if_stmt

block: statement*

?expr: term
    | expr "+" term -> add
    | expr "-" term -> sub


?term: power
    | term "*" power -> mul
    | term "/" power -> div

?power: atom
    | atom "^" power -> pow

?atom: NUMBER       -> number
    | NAME          -> var
    | "(" expr ")"
    | function_call

function_call: NAME "(" [expr_list] ")"
expr_list: expr ("," expr)*

object_value: "obj" "=" "{" [object_fields] "}"
object_fields: NAME ("," NAME)*

condition: expr

UNIT: /(M|T|P/

%import common.CNAME -> NAME
%import common.NUMBER
%import common.WS
%ignore WS